#pragma once

// UE Includes
#include "CoreMinimal.h"
#include "UObject/Object.h"

// NHTN Includes
#include "Components/NHTNBlackboardComponent.h"

#include "NHTNPlanner.generated.h"

enum class ENHTNPlanResult : uint8
{
	/** The planner failed to generate a plan */
	Failed,
	/** The planner generated the plan successfully */
	Success,
};

typedef TArray<TWeakObjectPtr<UNHTNBaseTask>> FWeakTasks;
typedef TArray<TWeakObjectPtr<UNHTNPrimitiveTask>> FWeakPrimitiveTasks;

struct FNHTNPlanResult
{
	/** The actual plan */
	FWeakPrimitiveTasks Plan;
	
	/** The result of the plan */
	ENHTNPlanResult Result;
};

struct FNHTNSavedWorldState
{
	FNHTNSavedWorldState(FNHTNBlackboardMemory&& InMemory, const FWeakPrimitiveTasks& InPlan,
		const FWeakTasks& InTasksToVisit)
		: Memory(MoveTemp(InMemory)), Plan(InPlan), TasksToVisit(InTasksToVisit) {}
	
	FNHTNBlackboardMemory Memory;
	FWeakPrimitiveTasks Plan;
	FWeakTasks TasksToVisit;
};

DECLARE_DELEGATE_OneParam(FNHTNOnPlanFinished, FNHTNPlanResult);

USTRUCT()
struct FNHTNPlanRequest
{
	GENERATED_BODY()

	/** The component making the request */
	UPROPERTY(Transient)
	TObjectPtr<UNHTNComponent> NHTNComponent = nullptr;

	/** The domain tasks from where the plan will be generated */
	UPROPERTY(Transient)
	TArray<TObjectPtr<UNHTNBaseTask>> TasksInstances;

	/** Broadcasts when the plan is generated */
	FNHTNOnPlanFinished Delegate;

	/** Generated by the planner so it can be referenced to stop the request */
	int32 UniqueID = INDEX_NONE;
};

UCLASS(Config = "NHTN")
class NHTN_API UNHTNPlanner : public UObject, public FTickableGameObject
{
	GENERATED_BODY()

public:
	UNHTNPlanner();

	/** Request the generation of a new plan. Returns the request ID */
	int32 GeneratePlan(FNHTNPlanRequest&& Request);

	/** Stops the generation of the plan with the given ID */
	void AbortPlan(int32 RequestID);

	// ~ Begin FTickableGameObject
	virtual TStatId GetStatId() const override;
	
	virtual bool IsTickable() const override;

	/** Generates the plan for the first request */
	virtual void Tick(float DeltaTime) override;
	// ~ End FTickableGameObject
	
	UPROPERTY(Config)
	FSoftClassPath PlannerClass;

protected:
	/** Generate a plan for the given request. Broadcasts when finished */
	void MakePlan(const FNHTNPlanRequest& Request) const;

	void RollbackWorldState(UNHTNBlackboardComponent& BBComp, FWeakPrimitiveTasks& InPlan,
		FWeakTasks& InTasksToVisit, TArray<FNHTNSavedWorldState>& SavedWorldStates) const;

private:
	/** The current waiting plan generation requests */
	UPROPERTY(Transient)
	TArray<FNHTNPlanRequest> Requests;
};
